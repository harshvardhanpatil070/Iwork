package com.freelancing.webapplication.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;

import com.freelancing.webapplication.entities.User;
import com.freelancing.webapplication.exceptions.ResourceNotFoundException;
import com.freelancing.webapplication.payloads.UserDto;
import com.freelancing.webapplication.repositories.UserRepo;
import com.freelancing.webapplication.services.UserService;
import org.modelmapper.ModelMapper;

public class UserServiceImpl implements UserService {
	
	@Autowired
	private UserRepo userRepo;
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public UserDto createUser(UserDto user) {
		User newUser = this.modelMapper.map(user, User.class);
		User savedUser = this.userRepo.save(newUser);
		return this.modelMapper.map(user, UserDto.class);
	}

	@Override
	public UserDto updateUser(UserDto user, Integer userId) {
		User getUser= this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User","Id",userId));
	
        getUser.setAbout(user.getAbout());
        getUser.setCity(user.getCity());
        getUser.setCountry(user.getCountry());
        getUser.setEmail(user.getEmail());
        getUser.setFirstName(user.getFirstName());
        getUser.setLastName(user.getLastName());
        getUser.setMobileNumber(user.getMobileNumber());
        getUser.setImage(user.getImage());
        User updatedUser= this.userRepo.save(getUser);
		
	return 	this.modelMapper.map(updatedUser, UserDto.class);	}

	@Override
	public UserDto getUserById(Integer userId) {
	User user = this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User","Id",userId));
		return this.modelMapper.map(user, UserDto.class);
	}

	@Override
	public List<UserDto> getAllUsers() {
		List<User> allUsers=this.userRepo.findAll();
		List<UserDto> result = allUsers.stream()
			    .map(user -> this.modelMapper.map(user, UserDto.class))
			    .collect(Collectors.toList());
		return result;
	}

	@Override
	public void deleteUser(Integer userId) {
		User user = this.userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User","id",userId));
		this.userRepo.delete(user);

	}

}
